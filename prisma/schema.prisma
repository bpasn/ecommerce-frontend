// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id          String        @id @default(uuid())
  subCategory SubCategory[] @relation("CategoryToSubCategory")
  product     Products[]    @relation("CategoryToProduct")
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Brand {
  id        String     @id @default(uuid())
  name      String     @unique
  image     String?    @db.Text
  product   Products[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

}

model SubCategory {
  id         String   @id @default(uuid())
  categoryId String
  category   Category @relation("CategoryToSubCategory", fields: [categoryId], references: [id])
  name       String
  Products   Products[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([categoryId])
}

model Products {
  id            String              @id @default(uuid())
  categoryId    String
  category      Category            @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name          String              @unique
  brandId       String
  subCategoryId String?
  title         String?
  description   productDescription?
  images        ImageProduct[]
  orderItem     OrderItem[]
  price         Decimal
  qty           Int
  sku           String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  brand         Brand               @relation(fields: [brandId], references: [id])
  subCategory   SubCategory?         @relation(fields: [subCategoryId], references: [id])
  @@index([categoryId])
  @@index([brandId])
  @@index([subCategoryId])
}

model productDescription {
  id        String   @id @default(uuid())
  productId String   @unique
  products  Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  feature   feature  @relation(fields: [featureId], references: [id])
  featureId String   @unique
  // functions   functions @relation(fields: [functionsId], references: [id])
  // functionsId String    @unique

  @@index([productId])
}

model feature {
  id                 String               @id @default(uuid())
  title              String
  lists              listFeature[]
  productDescription productDescription[]
}

model listFeature {
  id        String   @id @default(uuid())
  text      String   @db.Text
  feature   feature? @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId String?

  @@index([featureId])
}

// model functions {
//   id    String         @id @default(uuid())
//   text  String         @db.Text
//   lists listFunction[]

//   productDescription   productDescription[]
// }

// model listFunction {
//   id          String     @id @default(uuid())
//   text        String     @db.Text
//   functions   functions? @relation(fields: [functionsId], references: [id], onDelete: Cascade)
//   functionsId String?

//   @@index([functionsId])
// }

model ImageProduct {
  id        String   @id @default(uuid())
  productId String
  image     String   @db.VarChar(256)
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Orders {
  id        String      @id @default(uuid())
  orderItem OrderItem[]
  isPain    Boolean     @default(false)
  total     Decimal
  phone     String      @default("")
  address   String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  ordersId  String
  order     Orders   @relation(fields: [ordersId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  product   Products @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([ordersId])
}
